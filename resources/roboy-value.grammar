# Roboy Parser Grammar

## POS Tags
(rule $Verb ($PHRASE) (FilterPosTagFn span VB VBD VBN VBG VBP VBZ VBD-AUX))
(rule $ProNoun ($TOKEN) (FilterPosTagFn token PRP PRP$))
(rule $ProNounEnd ($TOKEN) (FilterPosTagFn token POS))
(rule $Preposition ($TOKEN) (FilterPosTagFn token IN))
(rule $Conj ($TOKEN) (FilterPosTagFn token CC))
(rule $Det ($TOKEN) (FilterPosTagFn token DT PDT))
(rule $Wh ($TOKEN) (FilterPosTagFn token WP WP$))
(rule $Number ($PHRASE) (FilterPosTagFn span CD))
(rule $BE ($PHRASE) (FilterPosTagFn span BE))
(rule $HAVE ($PHRASE) (FilterPosTagFn span HAVE))

# Words ignored
(rule $Ignore ($LEMMA_PHRASE) (FilterPosTagFn span BE HAVE MD FW RB JJ RBR RBS UH EX DT PDT TO))
(rule $LEMMAS ($Ignore $LEMMA_PHRASE) (SelectFn 1))
(rule $LEMMAS ($LEMMA_PHRASE $Ignore) (SelectFn 0))

## Limiting number of words in a phrase
(rule $VerbPhrase ($LEMMAS) (FilterPosTagFn span TO IN VB VBD VBN VBG VBP VBZ VBD-AUX JJ))
(rule $ValuePhrase ($LEMMA_PHRASE) (FilterPosTagFn span NNS NN NNP CD VBG VB))
(rule $NounPhrase ($PHRASE) (FilterPosTagFn span NNS NN CD))
(rule $EntityPhrase ($PHRASE) (FilterPosTagFn span NNP NNPS))
(rule $AdjPhrase ($LEMMAS) (FilterPosTagFn span JJ))
(rule $AdjToken ($AdjPhrase) (FilterSpanLengthFn 1 2))
(rule $VerbToken ($VerbPhrase) (FilterSpanLengthFn 1 2))
(rule $ValueToken ($ValuePhrase) (FilterSpanLengthFn 1 2))
(rule $NounToken ($NounPhrase) (FilterSpanLengthFn 1 3))
(rule $EntityToken ($EntityPhrase) (FilterSpanLengthFn 1 4))
(rule $IgnPhrase ($Ignore) (FilterSpanLengthFn 1 3))
(rule $Limited ($LEMMA_PHRASE) (FilterSpanLengthFn 1 3))

## SimpleLexiconFn

### Unaries
(rule $FullObjProp ($Limited) (SimpleLexiconFn (type "IntersectiveObjectPropertyAdjective")))
(rule $FullObjProp ($Limited) (SimpleLexiconFn (type "ObjectProperty")))

(rule $FullDataProp ($Limited) (SimpleLexiconFn (type "DataPropertyNoun")))
(rule $FullDataProp ($Limited) (SimpleLexiconFn (type "IntersectiveDataPropertyAdjective")))

(rule $FullObjType ($Limited) (SimpleLexiconFn (type "ClassNoun")))
(rule $FullObjType ($Limited) (SimpleLexiconFn (type "RoboyClassNoun")))

### Binaries
(rule $PartObjProp ($Limited) (SimpleLexiconFn (type "RelationalNoun")))
(rule $PartDataProp ($Limited) (SimpleLexiconFn (type "RelationalNoun")))
(rule $RObjProp ($Limited) (SimpleLexiconFn (type "RoboyRelNoun")))
(rule $RDataProp ($Limited) (SimpleLexiconFn (type "RoboyDataProp")))
(rule $QObjProp ($Limited) (SimpleLexiconFn (type "RoboyQRelNoun")))
(rule $QDataProp ($Limited) (SimpleLexiconFn (type "RoboyQDataProp")))

(rule $PartObjProp ($Limited) (SimpleLexiconFn (type "StateVerb")))
(rule $PartObjProp ($Limited) (SimpleLexiconFn (type "RelationalAdjective")))

(rule $RObjProp ($Limited) (SimpleLexiconFn (type "ObjProp")))
(rule $RDataProp ($Limited) (SimpleLexiconFn (type "DataProp")))
(rule $QObjProp ($Limited) (SimpleLexiconFn (type "ObjQProp")))
(rule $QDataProp ($Limited) (SimpleLexiconFn (type "DataQProp")))

### Entities
(rule $Entity ($EntityToken) (SimpleLexiconFn (type "NamedEntity")))
(rule $Person ($ProNoun) (SimpleLexiconFn (type "Person")))
(rule $Person ($Person do) (SimpleLexiconFn (type "Person")))

## OpenTypes
(when error
    (rule $FullObjType ($NounToken) (OpenTypeFn type))
    (rule $FullDataProp ($NounToken) (OpenTypeFn type))

    (rule $PartObjProp ($NounToken) (OpenTypeFn relation))
    (rule $PartDataProp ($NounToken) (OpenTypeFn relation))
    (rule $PartObjProp ($VerbToken) (OpenTypeFn relation))
    (rule $PartDataProp ($VerbToken) (OpenTypeFn relation))
    (rule $PartObjProp ($AdjToken) (OpenTypeFn relation))
    (rule $PartDataProp ($AdjToken) (OpenTypeFn relation))

    (rule $Entity ($EntityToken) (OpenTypeFn entity))
)
#(rule $ROOT ($PHRASE) (OpenTypeFn type))
#(rule $ROOT ($PHRASE) (OpenTypeFn relation))
#(rule $ROOT ($PHRASE) (OpenTypeFn entity))

## Forming Subject
#(rule $Subject ($Person) (IdentityFn))
(rule $Subject ($Entity) (IdentityFn))
(rule $Subject ($Subject or $Subject) (ConcatFn ";"))
(rule $Subject ($Subject and $Subject) (ConcatFn ","))
(rule $Subject ($Subject (, optional) $Subject) (ConcatFn ","))

(rule $RobSubject ($Person) (IdentityFn))
(rule $RobSubject ($RobSubject or $RobSubject) (ConcatFn ";"))
(rule $RobSubject ($RobSubject and $RobSubject) (ConcatFn ","))
(rule $RobSubject ($RobSubject (, optional) $RobSubject) (ConcatFn ","))

## Forming Predicate
(rule $Predicate ($PartObjProp) (IdentityFn))
(rule $Predicate ($PartDataProp) (IdentityFn))
(rule $Predicate ($Predicate or $Predicate) (ConcatFn ";"))
(rule $Predicate ($Predicate and $Predicate) (ConcatFn ","))
(rule $Predicate ($Predicate (, optional) $Predicate) (ConcatFn ","))

(rule $RObjPred ($RObjProp) (IdentityFn))
(rule $RObjPred ($BE $RObjPred) (SelectFn 1))
(rule $RObjPred ($HAVE $RObjPred) (SelectFn 1))
(rule $RObjPred ($IgnPhrase $RObjPred) (SelectFn 1))
(rule $RObjPred ($RObjPred $IgnPhrase) (SelectFn 0))
(rule $RObjPred ($RObjPred or $RObjPred) (ConcatFn ";"))
(rule $RObjPred ($RObjPred and $RObjPred) (ConcatFn ","))
(rule $RObjPred ($RObjPred (, optional) $RObjPred) (ConcatFn ","))

(rule $RDataPred ($RDataProp) (IdentityFn))
(rule $RDataPred ($BE $RDataProp) (SelectFn 1))
(rule $RDataPred ($HAVE $RDataProp) (SelectFn 1))
(rule $RDataPred ($IgnPhrase $RDataProp) (SelectFn 1))
(rule $RDataPred ($RDataProp $IgnPhrase) (SelectFn 0))
(rule $RDataPred ($RDataPred or $RDataPred) (ConcatFn ";"))
(rule $RDataPred ($RDataPred and $RDataPred) (ConcatFn ","))
(rule $RDataPred ($RDataPred (, optional) $RDataPred) (ConcatFn ","))

(rule $QObjPred ($QObjProp) (IdentityFn))
(rule $QObjPred ($BE $QObjPred) (SelectFn 1))
(rule $QObjPred ($HAVE $QObjPred) (SelectFn 1))
(rule $QObjPred ($IgnPhrase $QObjPred) (SelectFn 1))
(rule $QObjPred ($QObjPred $IgnPhrase) (SelectFn 0))
(rule $QObjPred ($QObjPred or $QObjPred) (ConcatFn ";"))
(rule $QObjPred ($QObjPred and $QObjPred) (ConcatFn ","))
(rule $QObjPred ($QObjPred (, optional) $QObjPred) (ConcatFn ","))

(rule $QDataPred ($QDataProp) (IdentityFn))
(rule $QDataPred ($BE $QDataProp) (SelectFn 1))
(rule $QDataPred ($HAVE $QDataProp) (SelectFn 1))
(rule $QDataProp ($IgnPhrase $QDataProp) (SelectFn 1))
(rule $QDataProp ($QDataProp $IgnPhrase) (SelectFn 0))
(rule $QDataPred ($QDataPred or $QDataPred) (ConcatFn ";"))
(rule $QDataPred ($QDataPred and $QDataPred) (ConcatFn ","))
(rule $QDataPred ($QDataPred (, optional) $QDataPred) (ConcatFn ","))

(rule $NAME ($BE) (ConstantFn rb:NAME_OF))
(rule $MEMBER ($BE ($Det optional)) (ConstantFn rb:MEMBER_OF))
(rule $OCCUP ($BE $Det) (ConstantFn rb:OCCUPIED_AS))

## Forming Objects
(rule $Object ($Subject) (IdentityFn))
(rule $Object ($BE $Object) (SelectFn 1))
(rule $Object ($Object or $Object) (ConcatFn ";"))
(rule $Object ($Object and $Object) (ConcatFn ","))
(rule $Object ($Object (, optional) $Object) (ConcatFn ","))

## Forming POs
(rule $PredObj ($FullObjProp) (IdentityFn))
(rule $PredObj ($FullObjType) (IdentityFn))
(rule $PredObj ($FullDataProp) (IdentityFn))
(rule $ROOT ($PredObj) (IdentityFn))

## Forming Values
(rule $Value ($EntityToken) (IdentityFn))
(rule $Value ($ValueToken) (IdentityFn))
(rule $Value ($BE $ValueToken) (SelectFn 1))
(rule $Value ($AdjPhrase $ValueToken) (SelectFn 1))
(rule $Value ($Value or $Value) (ConcatFn ";"))
(rule $Value ($Value and $Value) (ConcatFn ","))
(rule $Value ($Value (, optional) $Value) (ConcatFn ","))

# Expressions Roboy
############################################################
#(rule $Expr ($RobSubject $MEMBER $Object member) (TripleFn "spo"))
#(rule $Expr ($RobSubject $OCCUP $Object) (TripleFn "spo"))
(rule $Expr ($RobSubject $MEMBER $Value member) (TripleFn "spo"))
(rule $Expr ($RobSubject $OCCUP $Value) (TripleFn "spo"))
(rule $Expr ($RobSubject $NAME $EntityToken) (TripleFn "spo"))
#(rule $Expr ($RObjPred $RobSubject $Object) (TripleFn pso))
(rule $Expr ($RObjPred $RobSubject $Value) (TripleFn pso))
#(rule $Expr ($RobSubject $RObjPred $Object) (TripleFn spo))
(rule $Expr ($RobSubject $RObjPred $Value) (TripleFn spo))
(rule $Expr ($RobSubject $RDataPred $Value) (TripleFn spo))
#(rule $Expr ($Object $RobSubject $RObjPred ) (TripleFn osp))
(rule $Expr ($Value $RobSubject $RObjPred) (TripleFn osp))
(rule $Expr ($Value $RobSubject $RDataPred) (TripleFn osp))
(rule $Expr ($RObjPred $RobSubject $Value) (TripleFn pso))
#(rule $Expr ($RObjPred $RobSubject $Object) (TripleFn pso))
(rule $Expr ($RDataPred $RobSubject $Value) (TripleFn pso))
(rule $ROOT ($Limited $Expr) (SelectFn 1))
(rule $ROOT ($Expr) (IdentityFn))
(rule $ROOT ($Expr ($Conj optional) $Expr) (ListFn))
(rule $ROOT ($PHRASE) (SimpleLexiconFn (type "RoboyPhrases")))

# Questions
############################################################
(rule $Quest (who) (ConstantFn (rdf:type foaf:person) foaf:person))
(rule $Quest (who) (ConstantFn (rdf:type dbpedia:Organization) dbpedia:Organization))
(rule $Quest (who) (ConstantFn (rdf:type dbpedia:Company) dbpedia:Company))
(rule $Quest (where) (ConstantFn (rdf:type dbpedia:Organization) dbpedia:Organization))
(rule $Quest (where) (ConstantFn (rdf:type dbpedia:Place) dbpedia:Place))
(rule $Quest (where) (ConstantFn (rdf:type dbpedia:EducationalInstitution) dbpedia:EducationalInstitution))
(rule $Quest (when) (ConstantFn (rdf:type xsd:date) xsd:date))
(rule $Quest (how) (ConstantFn null null))
(rule $Quest (can i) (ConstantFn null null))
(rule $Quest (do) (ConstantFn null null))
(rule $Quest (you call) (ConstantFn null null))
(rule $Quest (what) (ConstantFn null null))
(rule $Quest ($Quest $Quest) (ConstantFn null null))
(rule $Quest (which $TOKEN) (ConstantFn null null))
(rule $Quest (tell me (something optional)) (ConstantFn null null))
(rule $Quest (date) (ConstantFn (rdf:type xsd:date) xsd:date))
(rule $Quest (year) (ConstantFn (rdf:type xsd:date) xsd:date))
(rule $Quest (day) (ConstantFn (rdf:type xsd:date) xsd:date))

# Aggregation
(rule $CountStr (how many) (ConstantFn null null))
(rule $CountStr (number of) (ConstantFn null null))
(rule $Operator ($CountStr) (ConstantFn (lambda x (count (var x))) (-> fb:type.any fb:type.any)))

# Roboy questions
(rule $RBaseSet ($Person ($Limited optional) $QObjPred) (JoinFn backward))
(rule $RBaseSet ($QObjPred ($Limited optional) $Person) (JoinFn forward))
(rule $RBaseSet ($Person ($Limited optional) $QDataProp) (JoinFn backward))
(rule $RBaseSet ($QDataProp ($Limited optional) $Person) (JoinFn forward))
#(rule $RBaseSet ($Object ($Limited optional) $RObjPred) (JoinFn backward))
#(rule $RBaseSet ($RObjPred ($Limited optional) $Object) (JoinFn forward))
#(rule $RBaseSet ($Object ($Limited optional) $RDataProp) (JoinFn backward))
#(rule $RBaseSet ($RDataProp ($Limited optional) $Object) (JoinFn forward))
#(rule $RBaseSet ($Value ($Limited optional) $QObjPred) (JoinFn backward))
#(rule $RBaseSet ($QObjPred ($Limited optional) $Value) (JoinFn forward))
#(rule $RBaseSet ($Value ($Limited optional) $QDataProp) (JoinFn backward))
#(rule $RBaseSet ($QDataProp ($Limited optional) $Value) (JoinFn forward))
(rule $RSet ($RBaseSet) (IdentityFn))
(rule $RSet ($RSet ($Limited optional) $RSet) (MergeFn and))

(rule $QExpr (($Limited optional) $Operator ($Limited optional) $Set) (JoinFn forward betaReduce))
(rule $QExpr (($Limited optional) $Set ($Limited optional)) (IdentityFn))
(rule $QExpr (($Limited optional) $Operator ($Limited optional) $RSet) (JoinFn forward betaReduce))
(rule $QExpr (($Limited optional) $RSet ($Limited optional)) (IdentityFn))
(rule $ROOT ($Quest $QExpr ($PHRASE optional)) (SelectFn 1))

# DBpedia questions
(rule $Set ($Unary $Set) (MergeFn and))
(rule $Set ($Binary $Entity) (JoinFn forward))
(rule $Set ($Entity $Binary) (JoinFn backward))
(rule $Set ($Binary $Entity) (JoinFn forward))
(rule $Set ($Entity $Binary) (JoinFn backward))
(rule $Unary ($PredObj) (IdentityFn))
(rule $Set ($Unary) (IdentityFn))
(rule $BaseSet ($Subject ($Limited optional) $Predicate) (JoinFn unary,binary unaryCanBeArg0 unaryCanBeArg1))
(rule $BaseSet ($Predicate ($Limited optional) $Subject) (JoinFn binary,unary unaryCanBeArg0 unaryCanBeArg1))
(rule $BaseSet ($Object ($Limited optional) $Predicate) (JoinFn unary,binary unaryCanBeArg0 unaryCanBeArg1))
(rule $BaseSet ($Predicate ($Limited optional) $Object) (JoinFn binary,unary unaryCanBeArg0 unaryCanBeArg1))
(rule $BaseSet ($Value ($Limited optional) $Predicate) (JoinFn unary,binary unaryCanBeArg0 unaryCanBeArg1))
(rule $BaseSet ($Predicate ($Limited optional) $Value) (JoinFn binary,unary unaryCanBeArg0 unaryCanBeArg1))
(rule $Set ($BaseSet) (IdentityFn))
(rule $Set ($Set ($Limited optional) $Set) (MergeFn and))
(rule $ROOT ($Quest $Set) (SelectFn 1))

# Math expressions
(include math.grammar)
