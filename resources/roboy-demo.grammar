# Roboy Small Talk

# Lexicon
(rule $Be ($BE) (ConstantFn (string rb:has_property)))
(rule $Not (not) (ConstantFn (string not)))
(rule $Not (no) (ConstantFn (string not)))
(rule $Not (neither) (ConstantFn (string not)))
(rule $Not (nor) (ConstantFn (string not)))

(rule $Class ($PHRASE) (SimpleLexiconFn (type "ClassNoun")))
(rule $QRelClass ($PHRASE) (SimpleLexiconFn (type "QRelat")))
(rule $RelClass ($PHRASE) (SimpleLexiconFn (type "RelationalNoun")))
(rule $RelatClass ($PHRASE) (SimpleLexiconFn (type "RelationClass")))
(rule $DatPropClass ($PHRASE) (SimpleLexiconFn (type "DataPropertyNoun")))
(rule $ObjPropClass ($PHRASE) (SimpleLexiconFn (type "ObjectProperty")))
(rule $ObjectClass ($LEMMA_PHRASE) (SimpleLexiconFn (type "ObjectClass")))
(rule $TypeProperty ($Adjective) (SimpleLexiconFn (type "TypeProperty")))

(rule $StateVerb ($LEMMA_PHRASE) (SimpleLexiconFn (type "StateVerb")))
(rule $Relat ($LEMMA_PHRASE) (SimpleLexiconFn (type "Relationship")))
(rule $Relat ($LEMMA_TOKEN) (SimpleLexiconFn (type "Relationship")))
(rule $QRelat ($LEMMA_TOKEN) (SimpleLexiconFn (type "QuRelat")))
(rule $ConsequenceVerb ($LEMMA_PHRASE) (SimpleLexiconFn (type "ConsequenceVerb")))

(rule $RelAdj ($PHRASE) (SimpleLexiconFn (type "RelationalAdjective")))
(rule $ObjectPropAdj ($PHRASE) (SimpleLexiconFn (type "IntersectiveObjectPropertyAdjective")))
(rule $DataPropAdj ($PHRASE) (SimpleLexiconFn (type "IntersectiveDataPropertyAdjective")))
(rule $InterAdj ($PHRASE) (SimpleLexiconFn (type "IntersectiveAdjective")))

# NER Tags
(rule $Number ($PHRASE) (FilterNerSpanFn span NUMBER))
(rule $Number ($PHRASE) (FilterNerSpanFn span DATE))
(rule $PersonName ($PHRASE) (FilterNerSpanFn span PERSON))
(rule $NamedEntity ($PHRASE) (FilterNerSpanFn span PERSON ORGANIZATION LOCATION MISC))

# POS Tags
(rule $Ignore ($PHRASE) (FilterPosTagFn span FW RB RBR RBS UH EX IN DT PDT TO))
(rule $PHRASE ($Ignore $PHRASE) (SelectFn 1))
(rule $PHRASE ($PHRASE $Ignore) (SelectFn 0))

(rule $Verb ($PHRASE) (FilterPosTagFn span VB VBD VBN VBG VBP VBZ VBD-AUX))
(rule $ModalVerb ($TOKEN) (FilterPosTagFn token MD))
(rule $ProNoun ($TOKEN) (FilterPosTagFn token PRP PRP$))
(rule $ProNounEnd ($TOKEN) (FilterPosTagFn token POS))
(rule $Noun ($PHRASE) (FilterPosTagFn span NN NNS NNP NNPS))
(rule $Adverb ($TOKEN) (FilterPosTagFn token RB RBR RBS))
(rule $Adjective ($TOKEN) (FilterPosTagFn token JJ))
(rule $Preposition ($TOKEN) (FilterPosTagFn token IN))
(rule $Conj ($TOKEN) (FilterPosTagFn token CC))
(rule $Det ($TOKEN) (FilterPosTagFn token DT PDT))
#(rule $Inter ($TOKEN) (FilterPosTagFn token UH))
(rule $To ($TOKEN) (FilterPosTagFn token TO))
#(rule $Exist ($TOKEN) (FilterPosTagFn token EX))
#(rule $ForeignWord ($TOKEN) (FilterPosTagFn token FW))
(rule $Wh ($TOKEN) (FilterPosTagFn token WP WP$))
(rule $BE ($PHRASE) (FilterPosTagFn span BE))
(rule $HAVE ($PHRASE) (FilterPosTagFn span HAVE))
(rule $Number ($PHRASE) (FilterPosTagFn span CD))

# Link words
#(rule $VerbPrep ($Verb $Preposition) (ConcatFn " "))
#(rule $VerbTo ($Verb $To) (ConcatFn " "))
#(rule $VerbTo ($To $Verb) (SelectFn 1))

# Roboy Subject Phrase
(rule $RSubject ($ObjectClass) (IdentityFn))
(rule $RSubject ($ProNoun) (SimpleLexiconFn (type "Person")))
(rule $RSubject ($RSubject or $RSubject) (ConcatFn ";"))
(rule $RSubject ($RSubject ($Conj optional) $RSubject) (ConcatFn ","))
(rule $RSubject ($RSubject (, optional) $RSubject) (ConcatFn ","))
(rule $RSubject ($RSubject $ProNounEnd) (SelectFn 0))


# Roboy Predicate Phrase
(rule $RPredicate (($BE optional) $Relat) (IdentityFn))
(rule $RPredicate (($HAVE optional) $Relat) (IdentityFn))
(rule $RPredicate ($RelatClass) (IdentityFn))
(rule $RPredicate ($Not $RPredicate) (ConcatFn " "))
(rule $RPredicate ($RPredicate and $RPredicate) (ConcatFn ","))
(rule $RPredicate ($RPredicate , $RPredicate) (ConcatFn ","))
(rule $RPredicate ($RPredicate or $RPredicate) (ConcatFn ";"))
(rule $RPredicate ($TypeProperty $ObjectClass) (TripleFn "pt"))

(rule $N ($BE) (ConstantFn rb:NAME_OF))
(rule $MEMBER ($BE) (ConstantFn rb:MEMBER_OF))
(rule $OCCUP ($BE $Det) (ConstantFn rb:OCCUPIED_AS))

# Object Phrase
(rule $Value ($Noun) (IdentityFn))
(rule $Value ($LEMMA_PHRASE) (FilterPosTagFn span VBG))
(rule $Value ($Det $Value) (SelectFn 1))
(rule $Value ($Conj $Value) (SelectFn 1))
(rule $Value ($Value or $Value) (ConcatFn ";"))
(rule $Value ($Value ($Conj optional) $Value) (ConcatFn ","))
(rule $Value ($Value , $Value) (ConcatFn ","))
(rule $Value ($Adjective $Value) (TripleFn "ot"))
(rule $Value ($Value $Adjective) (TripleFn "to"))

# Adjective Phrase
(rule $AdjPhrase ($Adjective) (IdentityFn))
(rule $AdjPhrase ($ObjectPropAdj) (IdentityFn))
(rule $AdjPhrase ($ObjectProperty) (IdentityFn))
(rule $AdjPhrase ($RelAdj) (IdentityFn))
(rule $AdjPhrase ($ObjectPropAdj) (IdentityFn))
(rule $AdjPhrase ($DataPropAdj) (IdentityFn))
(rule $AdjPhrase ($InterAdj) (IdentityFn))
(rule $AdjPhrase ($Not $AdjPhrase) (ConcatFn " "))
(rule $AdjPhrase ($Adverb $AdjPhrase) (ConcatFn " "))
(rule $AdjPhrase ($Conj $AdjPhrase) (SelectFn 1))
(rule $AdjPhrase ($AdjPhrase and $AdjPhrase) (ConcatFn ","))
(rule $Value ($AdjPhrase) (IdentityFn))

# Statement expressions
(rule $Expr ($RSubject $MEMBER $Value member) (TripleFn "spo"))
(rule $Expr ($RSubject $OCCUP $Value) (TripleFn "spo"))
(rule $Expr ($RSubject $N $PersonName) (TripleFn "spo"))
(rule $Expr ($RSubject $RPredicate ($TOKEN optional) ($BE optional) $Value) (TripleFn "spo"))
(rule $Expr ($Value ($BE optional) $RSubject $RPredicate) (TripleFn "osp"))
(rule $Expr ($RSubject $RPredicate ($BE optional) $Value) (TripleFn "spo"))
(rule $Expr ($AdjPhrase ($BE optional) $RSubject $RPredicate) (TripleFn "osp"))
(rule $Expr ($RPredicate $RSubject $Value) (TripleFn "pso"))
(rule $ROOT ($Expr) (IdentityFn))
(rule $ROOT (($PHRASE optional) $Expr) (IdentityFn))

# Question Phrase
(rule $Quest ($Wh) (SimpleLexiconFn (type Question)))
(rule $Quest ($Wh) (IdentityFn))
(rule $Quest (who) (ConstantFn (rdf:type foaf:person) foaf:person))
(rule $Quest (who) (ConstantFn (rdf:type dbpedia:Organization) dbpedia:Organization))
(rule $Quest (who) (ConstantFn (rdf:type dbpedia:Company) dbpedia:Company))
(rule $Quest (where) (ConstantFn (rdf:type dbpedia:Organization) dbpedia:Organization))
(rule $Quest (where) (ConstantFn (rdf:type dbpedia:Place) dbpedia:Place))
(rule $Quest (where) (ConstantFn (rdf:type dbpedia:EducationalInstitution) dbpedia:EducationalInstitution))
(rule $Quest (when) (ConstantFn (rdf:type xsd:date) xsd:date))
(rule $Q ($Wh date) (ConstantFn (rdf:type xsd:date) xsd:date))
(rule $Q ($Wh year) (ConstantFn (rdf:type xsd:date) xsd:date))
(rule $Q ($Wh day) (ConstantFn (rdf:type xsd:date) xsd:date))

# Question expressions
(rule $Binary ($QRelatClass) (IdentityFn))
(rule $Binary ($QRelat) (IdentityFn))
(rule $RSet ($RSubject) (IdentityFn))
(rule $RSet ($Quest) (IdentityFn))
(rule $RSet (($Wh optional) $RSet $RSet) (MergeFn and))
(rule $RSet (($Wh optional) $Entity $Binary) (JoinFn backward))
(rule $RSet (what is $Binary $RSubject) (JoinFn forward))
(rule $RSet (what is $RSubject $Binary) (JoinFn backward))
(rule $ROOT ($RSet) (IdentityFn))

# Math expressions
(include math.grammar)

(rule $Entity ($NamedEntity) (SimpleLexiconFn (type "NamedEntity")))
(rule $Entity ($NamedEntity) (OpenTypeFn entity))
(rule $Binary ($RelClass) (IdentityFn))
(rule $Set ($Entity) (IdentityFn))
(rule $Set ($Unary) (IdentityFn))
(rule $Set ($Quest) (IdentityFn))
(rule $Set (($Wh optional) $Unary $Set) (MergeFn and))
(rule $Set (($Wh optional) $Binary $Entity) (JoinFn forward))
(rule $Set (($Wh optional) $Entity $Binary) (JoinFn backward))
(rule $Set (what is $Binary $Entity) (JoinFn forward))
(rule $Set (what is $Entity $Binary) (JoinFn backward))
(rule $ROOT ($Set) (IdentityFn))

#TEST SET
(rule $ROOT ($Noun) (OpenTypeFn type))
(rule $ROOT ($Verb) (OpenTypeFn relation))
