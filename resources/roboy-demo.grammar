# Roboy Small Talk

# Lexicon
(rule $Be ($BE) (ConstantFn (string rb:has_property)))
(rule $Not (not) (ConstantFn (string not)))
(rule $Not (no) (ConstantFn (string not)))
(rule $Not (neither) (ConstantFn (string not)))
(rule $Not (nor) (ConstantFn (string not)))

(rule $Class ($PHRASE) (SimpleLexiconFn (type "ClassNoun")))
(rule $RelClass ($PHRASE) (SimpleLexiconFn (type "RelationalNoun")))
(rule $RelatClass ($PHRASE) (SimpleLexiconFn (type "RelationClass")))
(rule $DatPropClass ($PHRASE) (SimpleLexiconFn (type "DataPropertyNoun")))
(rule $ObjPropClass ($PHRASE) (SimpleLexiconFn (type "ObjectProperty")))
(rule $ObjectClass ($LEMMA_PHRASE) (SimpleLexiconFn (type "ObjectClass")))
(rule $TypeProperty ($Adjective) (SimpleLexiconFn (type "TypeProperty")))

(rule $StateVerb ($LEMMA_PHRASE) (SimpleLexiconFn (type "StateVerb")))
(rule $Relat ($LEMMA_PHRASE) (SimpleLexiconFn (type "Relationship")))
(rule $Relat ($LEMMA_TOKEN) (SimpleLexiconFn (type "Relationship")))
(rule $ConsequenceVerb ($LEMMA_PHRASE) (SimpleLexiconFn (type "ConsequenceVerb")))

(rule $RelAdj ($PHRASE) (SimpleLexiconFn (type "RelationalAdjective")))
(rule $ObjectPropAdj ($PHRASE) (SimpleLexiconFn (type "IntersectiveObjectPropertyAdjective")))
(rule $DataPropAdj ($PHRASE) (SimpleLexiconFn (type "IntersectiveDataPropertyAdjective")))
(rule $InterAdj ($PHRASE) (SimpleLexiconFn (type "IntersectiveAdjective")))

# NER Tags
(rule $Number ($PHRASE) (FilterNerSpanFn span NUMBER))
(rule $Number ($PHRASE) (FilterNerSpanFn span DATE))
(rule $NamedEntity ($PHRASE) (FilterNerSpanFn span PERSON ORGANIZATION LOCATION MISC))

# POS Tags
(rule $Ignore ($PHRASE) (FilterPosTagFn span FW RB RBR RBS UH EX IN DT PDT TO))
(rule $PHRASE ($Ignore $PHRASE) (SelectFn 1))
(rule $PHRASE ($PHRASE $Ignore) (SelectFn 0))

(rule $Verb ($PHRASE) (FilterPosTagFn span VB VBD VBN VBG VBP VBZ VBD-AUX))
(rule $ModalVerb ($TOKEN) (FilterPosTagFn token MD))
(rule $ProNoun ($TOKEN) (FilterPosTagFn token PRP PRP$))
(rule $ProNounEnd ($TOKEN) (FilterPosTagFn token POS))
(rule $Noun ($PHRASE) (FilterPosTagFn span NN NNS NNP NNPS))
(rule $Adverb ($TOKEN) (FilterPosTagFn token RB RBR RBS))
(rule $Adjective ($TOKEN) (FilterPosTagFn token JJ))
(rule $Preposition ($TOKEN) (FilterPosTagFn token IN))
(rule $Conj ($TOKEN) (FilterPosTagFn token CC))
(rule $Det ($TOKEN) (FilterPosTagFn token DT PDT))
#(rule $Inter ($TOKEN) (FilterPosTagFn token UH))
(rule $To ($TOKEN) (FilterPosTagFn token TO))
#(rule $Exist ($TOKEN) (FilterPosTagFn token EX))
#(rule $ForeignWord ($TOKEN) (FilterPosTagFn token FW))
(rule $Wh ($TOKEN) (FilterPosTagFn token WP WP$))
(rule $BE ($PHRASE) (FilterPosTagFn span BE))
(rule $Number ($PHRASE) (FilterPosTagFn span CD))

# Link words
#(rule $VerbPrep ($Verb $Preposition) (ConcatFn " "))
#(rule $VerbTo ($Verb $To) (ConcatFn " "))
#(rule $VerbTo ($To $Verb) (SelectFn 1))

# Subject Phrase
(rule $Subject ($Class) (IdentityFn))
(rule $Subject ($DatPropClass) (IdentityFn))
(rule $Subject ($ProNoun) (SimpleLexiconFn (type "Person")))
(rule $Subject ($RelClass $Preposition) (SelectFn 0))
(rule $Subject ($RelClass $To) (SelectFn 0))
(rule $Subject ($Subject $RelatClass) (ConcatFn ","))
(rule $Subject ($Det $Subject) (SelectFn 1))
(rule $Subject ($Entity) (IdentityFn))
(rule $Subject ($Subject or $Subject) (ConcatFn ";"))
(rule $Subject ($Subject ($Conj optional) $Subject) (ConcatFn ","))
(rule $Subject ($Subject (, optional) $Subject) (ConcatFn ","))
(rule $Subject ($Subject $ProNounEnd) (SelectFn 0))
#(rule $Subject ($Adjective $Subject) (TripleFn "ot"))
#(rule $Subject ($Subject $Adjective) (TripleFn "to"))

# Subject Phrase
(rule $Object ($Noun) (IdentityFn))
(rule $Object ($Det $Object) (SelectFn 1))
(rule $Object ($Conj $Object) (SelectFn 1))
(rule $Object ($Object or $Object) (ConcatFn ";"))
(rule $Object ($Object and $Object) (ConcatFn ","))
(rule $Object ($Object , $Object) (ConcatFn ","))
#(rule $Object ($Adjective $Object) (TripleFn "ot"))
#(rule $Object ($Object $Adjective) (TripleFn "to"))

# Adjective Phrase
(rule $AdjPhrase ($Adjective) (IdentityFn))
(rule $AdjPhrase ($ObjectPropAdj) (IdentityFn))
(rule $AdjPhrase ($ObjectProperty) (IdentityFn))
(rule $AdjPhrase ($RelAdj) (IdentityFn))
(rule $AdjPhrase ($ObjectPropAdj) (IdentityFn))
(rule $AdjPhrase ($DataPropAdj) (IdentityFn))
(rule $AdjPhrase ($InterAdj) (IdentityFn))
(rule $AdjPhrase ($Not $AdjPhrase) (ConcatFn " "))
(rule $AdjPhrase ($Adverb $AdjPhrase) (ConcatFn " "))
(rule $AdjPhrase ($Conj $AdjPhrase) (SelectFn 1))
(rule $AdjPhrase ($AdjPhrase and $AdjPhrase) (ConcatFn ","))

# Predicate Phrase
#(rule $Predicate ($PHRASE) (OpenTypeFn relation))
(rule $Predicate ($StateVerb) (IdentityFn))
(rule $Predicate ($ConsequenceVerb) (IdentityFn))
(rule $Predicate ($Relat) (IdentityFn))
(rule $Predicate ($RelatClass) (IdentityFn))
(rule $Predicate ($Not $Predicate) (ConcatFn " "))
(rule $Predicate ($Predicate ($Conj optional) $Predicate) (ConcatFn ","))
(rule $Predicate ($Predicate or $Predicate) (ConcatFn ";"))
#(rule $Predicate ($TypeProperty $PHRASE) (SelectFn 0))
(rule $Predicate ($TypeProperty $ObjectClass) (TripleFn "pt"))
(rule $Pred ($TypeProperty $ObjectClass) (TripleFn "pt"))

# Question Phrase
(rule $Quest ($Wh) (SimpleLexiconFn (type Question)))
(rule $Quest ($Wh) (IdentityFn))
(rule $Quest ($Quest and $Quest) (ConcatFn "&"))
(rule $Quest ($Quest $Quest) (ConcatFn "&"))
(rule $Quest ($Quest or $Quest) (ConcatFn "|"))
(rule $Quest ($Quest $BE) (SelectFn 0))

# Subordinating conjunctions I
(rule $SubTime ($PHRASE) (SimpleLexiconFn (type subordinate.time)))
(rule $SubPlace ($PHRASE) (SimpleLexiconFn (type subordinate.place)))
(rule $SubEffect ($PHRASE) (SimpleLexiconFn (type subordinate.effect)))
(rule $SubCause ($PHRASE) (SimpleLexiconFn (type subordinate.cause)))

# Subordinating conjunctions II
(rule $SubSen ($SubTime $Expr) (ConcatFn ":"))
(rule $SubSen ($SubPlace $Expr) (ConcatFn ":"))
(rule $SubSen ($SubEffect $Expr) (ConcatFn ":"))
(rule $SubSen ($SubCause $Expr) (ConcatFn ":"))
(rule $Expr ($Expr $SubSen) (ConcatFn ")->("))
(rule $Expr ($SubSen $Expr) (ConcatFn ")<-("))

# Expressions
#(rule $Expr ($Subject ($BE optional) $AdjPhrase) (ConcatFn ","))
#(rule $Expr ($Subject ($BE optional) $Noun) (ConcatFn ","))
#(rule $Expr ($Subject ($BE optional) $Noun) (ConcatFn ","))
(rule $Expr ($Subject $Predicate ($BE optional) $Object) (TripleFn "spo"))
(rule $Expr ($Noun ($BE optional) $Subject $Predicate) (TripleFn "osp"))
(rule $Expr ($Subject $Predicate ($BE optional) $AdjPhrase) (TripleFn "spo"))
(rule $Expr ($AdjPhrase ($BE optional) $Subject $Predicate) (TripleFn "osp"))
#(rule $Expr ($Noun is $Subject $Predicate) (TripleFn "osp"))
#(rule $Expr ($Subject $Predicate $AdjPhrase) (TripleFn "spo"))
#(rule $Expr ($Subject $Predicate $Subject) (ConcatFn ","))
#(rule $Expr ($Subject $Predicate $Noun) (ConcatFn ","))

(rule $Expr ($Quest $Expr) (SelectFn 1))
#(rule $Expr ($Quest $BE $Subject) (ConcatFn "."))
#(rule $Expr ($Quest $BE $AdjPhrase) (ConcatFn "."))
#(rule $Expr ($Quest $Predicate $Subject) (ConcatFn "."))
#(rule $Expr ($Quest $Predicate $AdjPhrase) (ConcatFn "."))
#(rule $Expr ($Quest $Predicate $Subject $Predicate) (ConcatFn "."))
#(rule $Expr ($Quest $Predicate $Subject $AdjPhrase) (ConcatFn "."))
#
(rule $ROOT ($Expr) (IdentityFn))
(rule $ROOT ($Pred) (IdentityFn))
(rule $ROOT ($Expr or $Expr) (ConcatFn " or "))
(rule $ROOT ($Not $Expr) (ConcatFn " "))
(rule $ROOT ($Expr ($Conj optional) $Expr) (ConcatFn " and "))

# Math expressions
(include math.grammar)

(rule $Entity ($NamedEntity) (SimpleLexiconFn (type "NamedEntity")))
(rule $Entity ($NamedEntity) (OpenTypeFn entity))
(rule $Binary ($RelClass) (IdentityFn))
(rule $Set ($Entity) (IdentityFn))
(rule $Set ($Unary) (IdentityFn))
(rule $Set (($Quest optional) $Unary $Set) (MergeFn and))
(rule $Set (($Quest optional) $Binary $Entity) (JoinFn forward))
(rule $Set (($Quest optional) $Entity $Binary) (JoinFn backward))
(rule $Set (what is $Binary $Entity) (JoinFn forward))
(rule $Set (what is $Entity $Binary) (JoinFn backward))
(rule $Question ($Set) (IdentityFn))
(rule $ROOT ($PHRASE) (OpenTypeFn type))
(rule $ROOT ($Set) (IdentityFn))
