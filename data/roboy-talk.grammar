# Roboy Small Talk

# Lexicon
#(rule $KnownOper ($ProNoun) (SimpleLexiconFn (type operator)))
(rule $KnownPhrase ($PHRASE) (SimpleLexiconFn (type utterance)))
#(rule $KnownVerb ($VerbPrep) (SimpleLexiconFn (type property)))
#(rule $KnownVerb ($Verb) (SimpleLexiconFn (type property)))
#(rule $KnownObj ($Noun) (SimpleLexiconFn (type object)))
(rule $Negation ($PHRASE) (SimpleLexiconFn (type negation)))
(rule $AdvTime ($PHRASE) (SimpleLexiconFn (type adverb.freq)))

# CORENLP
(rule $WordVerb ($TOKEN) (FilterPosTagFn token VB VBD VBN VBG VBP VBZ VBD-AUX))
(rule $WordProNoun ($TOKEN) (FilterPosTagFn token PRP PRP$ DT))
(rule $WordEntity ($TOKEN) (FilterPosTagFn token NNP NNPS))
(rule $WordNoun ($TOKEN) (FilterPosTagFn token NN NNS NNP NNPS))
(rule $WordAdv ($TOKEN) (FilterPosTagFn token RB))
(rule $Adj ($TOKEN) (FilterPosTagFn token JJ))
(rule $Prep ($TOKEN) (FilterPosTagFn token IN))
(rule $Conj ($TOKEN) (FilterPosTagFn token CC))
(rule $Det ($TOKEN) (FilterPosTagFn token DET))
(rule $To ($TOKEN) (FilterPosTagFn token TO))

(rule $NUMBER ($TOKEN) (FilterNerSpanFn token NUMBER))
(rule $PhraseVerbPrep ($WordVerb $Prep) (ConcatFn " "))
(rule $PhraseVerbTo ($WordVerb $To) (ConcatFn " "))
(rule $PhraseVerbTo ($To $Verb) (SelectFn 1))

# Lexicon
(rule $KnownPhrase ($PHRASE) (SimpleLexiconFn (type utterance)))
(rule $Noun ($WordNoun) (SimpleLexiconFn (type class)))
(rule $Noun ($PHRASE) (SimpleLexiconFn (type class)))
(rule $Noun ($NamedEntity) (SimpleLexiconFn (type entity)))
(rule $Verb ($LEMMA_TOKEN) (SimpleLexiconFn (type relationship)))
(rule $Verb ($PHRASE) (SimpleLexiconFn (type relationship)))
(rule $VerbPrep ($PhraseVerbPrep) (SimpleLexiconFn (type relationship)))
(rule $VerbTo ($PhraseVerbTo) (SimpleLexiconFn (type relationship)))
(rule $Verb ($WordVerb) (SimpleLexiconFn (type activity)))
(rule $VerbPrep ($PhraseVerbPrep) (SimpleLexiconFn (type activity)))
(rule $VerbTo ($PhraseVerbTo) (SimpleLexiconFn (type activity)))
(rule $ProNoun ($LEMMA_TOKEN) (SimpleLexiconFn (type operator)))
(rule $Adv ($TOKEN) (SimpleLexiconFn (type adverb.freq)))

(rule $Verb ($WordVerb) (SimpleLexiconFn (type relationship)))
(rule $VerbPrep ($PhraseVerbPrep) (SimpleLexiconFn (type relationship)))
(rule $VerbTo ($PhraseVerbTo) (SimpleLexiconFn (type relationship)))
(rule $Verb ($WordVerb) (SimpleLexiconFn (type activity)))
(rule $VerbPrep ($PhraseVerbPrep) (SimpleLexiconFn (type activity)))
(rule $VerbTo ($PhraseVerbTo) (SimpleLexiconFn (type activity)))
(rule $ProNoun ($LEMMA_TOKEN) (SimpleLexiconFn (type operator)))
(rule $Noun ($LEMMA_TOKEN) (SimpleLexiconFn (type class)))
(rule $Noun ($TOKEN) (SimpleLexiconFn (type class)))
(rule $Adv ($TOKEN) (SimpleLexiconFn (type adverb.freq)))

(rule $Verb ($WordVerb) (IdentityFn))
(rule $VerbPrep ($PhraseVerbPrep) (IdentityFn))
(rule $VerbTo ($PhraseVerbTo) (IdentityFn))
(rule $ProNoun ($WordProNoun) (IdentityFn))
(rule $Noun ($WordNoun) (IdentityFn))
(rule $Adv ($WordAdv) (IdentityFn))


# Inter
(rule $Inter ($TOKEN) (FilterPosTagFn token UH))
#(rule $IgnInter ($Inter) (ConstantFn null))
(rule $ProNoun ($Inter $ProNoun) (SelectFn 1))
(rule $Prep ($Inter $Prep) (SelectFn 1))
(rule $Conj ($Inter $Conj) (SelectFn 1))
(rule $Adj ($Inter $Adj) (SelectFn 1))
(rule $Verb ($Inter $Verb) (SelectFn 1))
(rule $Adv ($Inter $Adv) (SelectFn 1))
(rule $Det ($Inter $Det) (SelectFn 1))
(rule $To ($Inter $To) (SelectFn 1))
(rule $Verb ($Verb $Inter) (SelectFn 0))
(rule $ProNoun ($ProNoun $Inter) (SelectFn 0))
(rule $Noun ($Noun $Inter) (SelectFn 0))
(rule $Prep ($Prep $Inter) (SelectFn 0))
(rule $Conj ($Conj $Inter) (SelectFn 0))
(rule $Adj ($Adj $Inter) (SelectFn 0))
(rule $Adv ($Adv $Inter) (SelectFn 0))
(rule $Det ($Det $Inter) (SelectFn 0))
(rule $Noun ($Inter $Noun) (SelectFn 1))
(rule $To ($To $Inter) (SelectFn 0))

# AdjPhrase
(rule $AdjPhrase ($Adj) (IdentityFn))
(rule $AdjPhrase ($Negation $Adj) (ConcatFn " "))
(rule $AdjAnd (and $AdjPhrase) (SelectFn 1))
(rule $AdjOr (or $AdjPhrase) (SelectFn 1))
(rule $AdjPhrase ($AdjAnd $AdjPhrase) (ConcatFn ","))
(rule $AdjPhrase ($AdjOr $AdjPhrase) (ConcatFn ";"))
(rule $AdjPhrase ($AdjPhrase $AdjPhrase) (ConcatFn ","))
(rule $WordExpr ($AdjPhrase) (IdentityFn))

# NounPhrase
(rule $NounPhrase ($Noun) (IdentityFn))
(rule $NounPhrase ($Det $Noun) (SelectFn 1))
(rule $NounPhrase ($Negation $Noun) (ConcatFn " "))
(rule $NounPhrase ($AdjPhrase $Noun) (ConcatFn "<-"))
(rule $NounPhrase ($AdjPhrase $NounPhrase) (ConcatFn "<-"))
(rule $NounPhrase ($ProNoun $NounPhrase) (ConcatFn "<-"))
(rule $NounPhrase ($ProNoun $NounPhrase) (ConcatFn "<-"))
(rule $NounAnd (and $NounPhrase) (SelectFn 0))
(rule $NounOr (or $NounPhrase) (SelectFn 0))
(rule $NounPhrase ($NounAnd $NounPhrase) (ConcatFn ","))
(rule $NounPhrase ($NounOr $NounPhrase) (ConcatFn ";"))
(rule $NounPhrase ($NounPhrase $NounPhrase) (ConcatFn " "))
(rule $WordExpr ($NounPhrase) (IdentityFn))

# VerbPhrase
(rule $VerbPhrase ($Verb) (IdentityFn))
(rule $VerbPhrase ($VerbTo $VerbPhrase) (SelectFn 1))
(rule $VerbPhrase ($VerbTo) (IdentityFn))
(rule $VerbPhrase ($Negation $Verb) (ConcatFn " "))
(rule $VerbPhrase ($Negation $VerbPrep) (ConcatFn " "))
(rule $VerbPhrase ($Negation $VerbTo) (ConcatFn " "))
(rule $VerbPhrase ($VerbPrep) (IdentityFn))
#(rule $VerbPhrase ($VerbPhrase $Adv) (SelectFn 0))
(rule $VerbPhrase ($VerbPhrase $VerbPhrase) (ConcatFn "+"))
(rule $VerbPhrase ($AdvTime $VerbPhrase) (ConcatFn "<-"))
(rule $VerbPhrase ($VerbPhrase $AdvTime) (ConcatFn "->"))
(rule $WordExpr ($VerbPhrase) (IdentityFn))

# Simple sentences
(rule $Simple ($ProNoun $VerbPhrase $NounPhrase) (ConcatFn "."))
(rule $Simple ($ProNoun $VerbPhrase $AdjPhrase) (ConcatFn "."))
(rule $Simple ($ProNoun $VerbPhrase $VerbPhrase) (ConcatFn "."))
(rule $Simple ($NounPhrase $VerbPhrase $AdjPhrase) (ConcatFn "."))
(rule $Simple ($NounPhrase $VerbPhrase $ProNoun) (ConcatFn "."))
(rule $Simple ($NounPhrase $VerbPhrase $NounPhrase) (ConcatFn "."))
(rule $Simple ($ProNoun $VerbPhrase $ProNoun) (ConcatFn "."))
(rule $Simple ($Simple $AdvTime) (ConcatFn ")->("))
(rule $Simple ($AdvTime $Simple) (ConcatFn ")<-("))

# Simple questions
(rule $Quest ($PHRASE) (SimpleLexiconFn (type question)))
(rule $Quest ($LEMMA_TOKEN) (SimpleLexiconFn (type question)))
(rule $Quest ($PHRASE) (SimpleLexiconFn (type unary)))
(rule $Quest ($LEMMA_TOKEN) (SimpleLexiconFn (type unary)))
(rule $QuestAnd ($Quest and) (SelectFn 0))
(rule $QuestOr ($Quest or) (SelectFn 0))
(rule $Quest ($Quest $Quest) (SelectFn 0))
(rule $Quest ($QuestAnd $Quest) (ConcatFn ","))
(rule $Quest ($QuestOr $Quest) (ConcatFn ";"))
(rule $SimpleQuest ($Quest $Simple) (ConcatFn "."))
(rule $SimpleQuest ($Quest is $NounPhrase) (ConcatFn "."))
(rule $SimpleQuest ($Quest $VerbPhrase $NounPhrase) (ConcatFn "."))
(rule $SimpleQuest ($Quest $VerbPhrase $AdjPhrase) (ConcatFn "."))
(rule $SimpleQuest ($Quest $VerbPhrase $ProNoun) (ConcatFn "."))
(rule $SimpleQuest ($Quest $VerbPhrase $ProNoun $VerbPhrase) (ConcatFn "."))
(rule $SimpleQuest ($Quest $VerbPhrase $NounPhrase $AdjPhrase) (ConcatFn "."))
(rule $SimpleQuest ($Quest $VerbPhrase $NounPhrase $VerbPhrase) (ConcatFn "."))
(rule $SimpleQuest ($Quest $VerbPhrase $ProNoun $AdjPhrase) (ConcatFn "."))

# Sentence
(rule $Sentence ($SimpleQuest) (IdentityFn))
(rule $Sentence ($Simple) (IdentityFn))

# Coordinating conjunctions
(rule $ConjOr (or $Sentence) (SelectFn 0))
(rule $ConjMC ($Conj $Sentence) (SelectFn 1))
(rule $Expr ($Sentence $ConjOr) (ConcatFn ");("))
(rule $Expr ($Sentence $ConjMC) (ConcatFn ") ("))

# Subordinating conjunctions I
(rule $SubTime ($PHRASE) (SimpleLexiconFn (type subordinate.time)))
(rule $SubPlace ($PHRASE) (SimpleLexiconFn (type subordinate.place)))
(rule $SubEffect ($PHRASE) (SimpleLexiconFn (type subordinate.effect)))
(rule $SubCause ($PHRASE) (SimpleLexiconFn (type subordinate.cause)))

# Subordinating conjunctions II
(rule $SubSen ($SubTime $Sentence) (ConcatFn ":"))
(rule $SubSen ($SubPlace $Sentence) (ConcatFn ":"))
(rule $SubSen ($SubEffect $Sentence) (ConcatFn ":"))
(rule $SubSen ($SubCause $Sentence) (ConcatFn ":"))
(rule $Expr ($Sentence $SubSen) (ConcatFn ")->("))
(rule $Expr ($SubSen $Sentence) (ConcatFn ")<-("))

# Expressions
(rule $Expr ($WordExpr) (IdentityFn))
(rule $Expr ($KnownPhrase) (IdentityFn))
(rule $Expr ($SimpleQuest) (IdentityFn))
(rule $Expr ($Sentence) (IdentityFn))

# General sentence build
(rule $ROOT ($Expr) (IdentityFn))

(rule $Expr ($PHRASE) (NumberFn))
(rule $Operator (plus) (ConstantFn (lambda y (lambda x (call + (var x) (var y))))))
(rule $Operator (times) (ConstantFn (lambda y (lambda x (call * (var x) (var y))))))
(rule $Operator (divided by) (ConstantFn (lambda y (lambda x (call / (var x) (var y))))))
(rule $Operator (multiplied by) (ConstantFn (lambda y (lambda x (call * (var x) (var y))))))
(rule $Operator (to the power of) (ConstantFn (lambda y (lambda x (call * (var x) (var y))))))
(rule $Operator (to the power of) (ConstantFn (lambda y (lambda x (call * (var x) (var y))))))
(rule $Function (cosine of) (ConstantFn (lambda x (call java.lang.Math.cos (var x)))))
(rule $Function (sine of) (ConstantFn (lambda x (call java.lang.Math.sin (var x)))))
(rule $Function (square (root optional) of) (ConstantFn (lambda x (call java.lang.Math.sqrt (var x)))))
(rule $Partial ($Operator $Expr) (JoinFn forward))
(rule $Expr ($Expr $Partial) (JoinFn backward))
(rule $Expr ($Function $Expr) (JoinFn forward))

(rule $Expr ($ProNoun ($PHRASE optional) $NounPhrase is $PHRASE) (ConcatFn "."))
#(rule $Expr ($ProNoun am ($Det optional) $NounPhrase ($PHRASE optional)) (ConcatFn "."))
#(rule $Expr ($ProNoun is ($Det optional) $NounPhrase ($PHRASE optional)) (ConcatFn "."))
#(rule $Expr ($ProNoun are ($Det optional) $NounPhrase ($PHRASE optional)) (ConcatFn "."))
(rule $Expr ($ProNoun $VerbPhrase ($Det optional) $TOKEN) (ConcatFn "."))
(rule $ROOT ((what optional) (is optional) ($Det optional) $Expr (? optional)) (IdentityFn))
